<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<diagram program="umlet" version="14.2">
  <zoom_level>5</zoom_level>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>200</x>
      <y>35</y>
      <w>350</w>
      <h>110</h>
    </coordinates>
    <panel_attributes>RecurrentNeuralNetwork&lt;SavedStateActivation, OutputActivation&gt;
-
- W: arma::mat
- U: arma::mat
- V: arma::mat
-
+ RecurrentNeuralNetwork()
+ const feedForward(const arma::mat&amp; x, 
						                                 std::unique_ptr&lt;arma::mat&gt;&amp; out_saved_states,
						                                 std::unique_ptr&lt;arma::mat&gt;&amp; out_outputs)
+ const getW() : const arma::mat&amp;
+ const getU() : const arma::mat&amp;
+ const getV() : const arma::mat&amp;</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>200</x>
      <y>160</y>
      <w>350</w>
      <h>85</h>
    </coordinates>
    <panel_attributes>TextRnn&lt;SavedStateActivation, OutputActivation&gt; &lt; RecurrentNeuralNetwork&lt;...&gt;
-
- vocab: const std::shared_ptr&lt;TextVocab&gt;
-
+ TextRnn(new_vocab: const std::shared_ptr&lt;TextVocab&gt;)
+ const strsToOneHotMat(const std::vector&lt;std::string&gt;&amp; strs): std::unique_ptr&lt;arma::mat&gt;
+ const oneHotMatToStrs(const arma::mat&amp; one_hot_mat): std::unique_ptr&lt;std::vector&lt;std::string\&gt;&gt;
+ const oneHotVecToStr(const arma::colvec&amp; one_hot_vec): std::unique_ptr&lt;std::string&gt;
+ const generateText(const std::string&amp; x_zero)</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>200</x>
      <y>365</y>
      <w>235</w>
      <h>50</h>
    </coordinates>
    <panel_attributes>SoftMaxActivation
-
+ eval(arma::colvec in): std::unique_ptr&lt;arma::colvec&gt;
+ evalPrime(arma::colvec in): std::unique_ptr&lt;arma::mat&gt;</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>200</x>
      <y>300</y>
      <w>235</w>
      <h>50</h>
    </coordinates>
    <panel_attributes>TanHActivation
-
+ eval(arma::colvec in): std::unique_ptr&lt;arma::colvec&gt;
+ evalPrime(arma::colvec in): std::unique_ptr&lt;arma::colvec&gt;</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>615</x>
      <y>35</y>
      <w>380</w>
      <h>110</h>
    </coordinates>
    <panel_attributes>NetworkTrainer&lt;NetworkType, ProgressEvaluator, CostFunction&gt;
-
- num_epochs: int
- samples_per_epoch: int
- learning_rate: double
- test_data_frac: double
- network: std::shared_ptr&lt;NetworkType&gt;
-
- train(const std::vector&lt;std::vector&lt;arma::colvec\&gt;&gt;)</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>200</x>
      <y>425</y>
      <w>325</w>
      <h>50</h>
    </coordinates>
    <panel_attributes>TextCrossEntropyLossFunction
-
+ eval(arma::colvec correct, arma::colvec predict): std::unique_ptr&lt;arma::colvec&gt;
+ evalPrime(arma::colvec correct, arma::colvec predict): std::unique_ptr&lt;arma::colvec&gt;</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>200</x>
      <y>485</y>
      <w>420</w>
      <h>50</h>
    </coordinates>
    <panel_attributes>TextProgressEvaluator
-
+ evalPercentCorrect&lt;NetworkType&gt;(const NetworkType&amp; network, const arma::mat&amp; predict, const arma::mat&amp; correct): double</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>680</x>
      <y>285</y>
      <w>350</w>
      <h>75</h>
    </coordinates>
    <panel_attributes>TextVocabGenerator
-
+ generateVocab(int max_vocab, std::vector&lt;std::vector&lt;std::string\&gt;&gt;): TextVocab</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>0</x>
      <y>35</y>
      <w>175</w>
      <h>110</h>
    </coordinates>
    <panel_attributes>Utils
-
typedef std::map&lt;std::string, int&gt; TextVocab;
typedef std::vector&lt;std::string&gt; TextSentence;</panel_attributes>
    <additional_attributes/>
  </element>
</diagram>
