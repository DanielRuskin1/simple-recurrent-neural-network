<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<diagram program="umlet" version="14.2">
  <zoom_level>4</zoom_level>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>308</x>
      <y>152</y>
      <w>416</w>
      <h>116</h>
    </coordinates>
    <panel_attributes>RecurrentNeuralNetwork&lt;ActivationLossConfig&gt;
-
- W: arma::mat
- U: arma::mat
- V: arma::mat
-
+ RecurrentNeuralNetwork(x_size: int, out_size: int, saved_state_size: int)
+ RecurrentNeuralNetwork(prev_output_prefix: const std::string&amp;)
+ const feedForward(const Sentence&amp; x, 
						                                 std::unique_ptr&lt;arma::mat&gt;&amp; out_saved_states,
						                                 std::unique_ptr&lt;Sentence&gt;&amp; out_outputs)
+ const save(output_prefix: const std::string&amp;)
+ const getW() : const arma::mat&amp;
+ updateWVal(row: int, col: int, change: double)
+ const getU() : const arma::mat&amp;
+ updateUVal(row: int, col: int, change: double)
+ const getV() : const arma::mat&amp;
+ updateVVal(row: int, col: int, change: double)</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>308</x>
      <y>276</y>
      <w>416</w>
      <h>116</h>
    </coordinates>
    <panel_attributes>TextRnn&lt;ActivationLossConfig&gt; &lt; RecurrentNeuralNetwork&lt;ActivationLossConfig&gt;
-
- vocab: std::shared_ptr&lt;const TextVocab&gt;
- vocab_rev: TextVocabRev
-
+ TextRnn(x_size: int, 
                 out_size: int,
                 saved_state_size: int, 
                 new_vocab: std::shared_ptr&lt;const TextVocab&gt;)
+ TextRnn(prev_output_prefix: const std:string&amp;)
+ const textWordToWord(text_word: const TextWord&amp;): std::unique_ptr&lt;Word&gt;
+ const wordToTextWord(word: const Word&amp;): std::unique_ptr&lt;TextWord&gt;
+ const textSentenceToSentence(text_sentence: const TextSentence&amp;): std::unique_ptr&lt;Sentence&gt;
+ const sentenceToTextSentence(sentence: const Sentence&amp;): std::unique_ptr&lt;TextSentence&gt;
+ const textSentenceListToSentenceList(text_sentences: const TextSentenceList&amp;): std::unique_ptr&lt;SentenceList&gt;
+ const sentenceListToTrainingSentenceList(sl: const SentenceList&amp;, out_x: std::unique_ptr&lt;SentenceList&gt;&amp;, out_y: std::unique_ptr&lt;SentenceList&gt;&amp;)
+ const sentenceListToTextSentenceList(sentences: const SentenceList&amp;): std::unique_ptr&lt;TextSentenceList&gt;
+ const generateSentence(word_zero: const TextWord&amp;, end_token: const TextWord&amp;, max_words: int): std::unique_ptr&lt;TextSentence&gt;)</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>0</x>
      <y>332</y>
      <w>288</w>
      <h>108</h>
    </coordinates>
    <panel_attributes>TextActivationLossConfig
-
+ static evalOutputActivation(in: const arma::colvec&amp;): std::unique_ptr&lt;arma::colvec&gt;
+ static evalSavedStateActivation(in: const arma::colvec&amp;): std::unique_ptr&lt;arma::colvec&gt;

+ static evalCost(correct: const Sentence&amp;, predict: const Sentence&amp;): double

+ static setGradients(network: const TextRnn&lt;TextActivationLossConfig&gt;&amp;, 
                                 bptt_truncate: int, 
                                 x: const Sentence&amp;, 
                                 y: const Sentence&amp;,
                                 saved_states: const arma::mat&amp;,
                                 outputs: const arma::mat&amp;,
                                 out_dCdW: std::unique_ptr&lt;arma::mat&gt;&amp;,
                                 out_dCdU: std::unique_ptr&lt;arma::mat&gt;&amp;,
                                 out_dCdV: std::unique_ptr&lt;arma::mat&gt;&amp;)</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>744</x>
      <y>152</y>
      <w>412</w>
      <h>108</h>
    </coordinates>
    <panel_attributes>NetworkTrainer&lt;NetworkType, ActivationLossConfig, ProgressEvaluator&gt;
-
- num_epochs: int
- samples_per_epoch: int
- learning_rate: double
- test_data_frac: double
- bptt_truncate: int
- network: std::shared_ptr&lt;NetworkType&gt;
-
+ NetworkTrainer(num_epochs_new: int, 
                            samples_per_batch_new: int, 
                            learning_rate_new: int, 
                            test_data_frac_new: int, 
                            bptt_truncate_new: int, 
                            network_new: std::shared_ptr&lt;NetworkType&gt;)
+ train(x: const SentenceList&amp;, y: const SentenceList&amp;)</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>0</x>
      <y>448</y>
      <w>288</w>
      <h>40</h>
    </coordinates>
    <panel_attributes>TextProgressEvaluator&lt;ActivationLossConfig&gt;
-
+ static evalPercentWordsCorrect(const TextRnn&lt;ActivationLossConfig&gt;&amp; network, 
                                                    const SentenceList&amp; predict, 
                                                    const SentenceList&amp; correct): double</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>0</x>
      <y>264</y>
      <w>288</w>
      <h>60</h>
    </coordinates>
    <panel_attributes>TextVocabGenerator
-
+ generateVocab(max_vocab: int, sentences: const TextSentenceList&amp;): std::unique_ptr&lt;TextVocab&gt;</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>0</x>
      <y>152</y>
      <w>288</w>
      <h>104</h>
    </coordinates>
    <panel_attributes>Utils
-
typedef arma::colvec Word
typedef arma::mat Sentence
typedef std::vector&lt;Sentence&gt; SentenceList

typedef std::string TextWord
typedef std::vector&lt;TextWord&gt; TextSentence
typedef std::vector&lt;TextSentence&gt; TextSentenceList

typedef std::unordered_map&lt;TextWord, int&gt; TextVocab
typedef std::unordered_map&lt;int, TextWord&gt; TextVocabRev
typedef std::vector&lt;std::pair&lt;TextWord, int&gt;&gt; TextOccurrenceCountsVec
typedef std::unordered_map&lt;TextWord, int&gt; TextOccurrenceCountsMap

#define UNKNOWN_CHAR_VAL "UNKNOWN_CHAR"</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>744</x>
      <y>268</y>
      <w>412</w>
      <h>68</h>
    </coordinates>
    <panel_attributes>GradientChecker&lt;NetworkType, ActivationLossConfig&gt;
-
- h: double
- error_threshold_percent: double
- error_threshold_abs: double
-
+ GradientChecker(h_new: double, error_threshold_percent_new: double, error_threshold_abs_new: double)
+ const checkGradients(output_prefix: const std::string&amp;, bptt_truncate: int, network: const NetworkType&amp;, x: const Sentence&amp;, y: const Sentence&amp;)
- const estimateGradient(network: NetworkType, var: const std::string&amp;, row: int, col: int, x: const Sentence&amp;, y: const Sentence&amp;): double </panel_attributes>
    <additional_attributes/>
  </element>
</diagram>
